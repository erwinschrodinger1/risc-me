$date
	Mon Jun 17 00:01:40 2024
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module general_registers_tb $end
$var wire 8 ! src2 [7:0] $end
$var wire 8 " src1 [7:0] $end
$var parameter 32 # CLK_PERIOD $end
$var reg 1 $ clk $end
$var reg 8 % data [7:0] $end
$var reg 3 & dest_bus_selector [2:0] $end
$var reg 1 ' reset $end
$var reg 3 ( src1_bus_selector [2:0] $end
$var reg 3 ) src2_bus_selector [2:0] $end
$scope module uut $end
$var wire 1 $ clk $end
$var wire 8 * data [7:0] $end
$var wire 3 + dest_bus_selector [2:0] $end
$var wire 1 ' reset $end
$var wire 3 , src1_bus_selector [2:0] $end
$var wire 3 - src2_bus_selector [2:0] $end
$var wire 8 . reg_R7_out [7:0] $end
$var wire 8 / reg_R6_out [7:0] $end
$var wire 8 0 reg_R5_out [7:0] $end
$var wire 8 1 reg_R4_out [7:0] $end
$var wire 8 2 reg_R3_out [7:0] $end
$var wire 8 3 reg_R2_out [7:0] $end
$var wire 8 4 reg_R1_out [7:0] $end
$var wire 8 5 reg_R0_out [7:0] $end
$var reg 8 6 src1 [7:0] $end
$var reg 8 7 src2 [7:0] $end
$scope module reg_R0 $end
$var wire 1 $ clk $end
$var wire 8 8 data [7:0] $end
$var wire 1 9 inc $end
$var wire 1 : latch $end
$var wire 1 ' reset $end
$var reg 8 ; reg_out [7:0] $end
$upscope $end
$scope module reg_R1 $end
$var wire 1 $ clk $end
$var wire 8 < data [7:0] $end
$var wire 1 = inc $end
$var wire 1 > latch $end
$var wire 1 ' reset $end
$var reg 8 ? reg_out [7:0] $end
$upscope $end
$scope module reg_R2 $end
$var wire 1 $ clk $end
$var wire 8 @ data [7:0] $end
$var wire 1 A inc $end
$var wire 1 B latch $end
$var wire 1 ' reset $end
$var reg 8 C reg_out [7:0] $end
$upscope $end
$scope module reg_R3 $end
$var wire 1 $ clk $end
$var wire 8 D data [7:0] $end
$var wire 1 E inc $end
$var wire 1 F latch $end
$var wire 1 ' reset $end
$var reg 8 G reg_out [7:0] $end
$upscope $end
$scope module reg_R4 $end
$var wire 1 $ clk $end
$var wire 8 H data [7:0] $end
$var wire 1 I inc $end
$var wire 1 J latch $end
$var wire 1 ' reset $end
$var reg 8 K reg_out [7:0] $end
$upscope $end
$scope module reg_R5 $end
$var wire 1 $ clk $end
$var wire 8 L data [7:0] $end
$var wire 1 M inc $end
$var wire 1 N latch $end
$var wire 1 ' reset $end
$var reg 8 O reg_out [7:0] $end
$upscope $end
$scope module reg_R6 $end
$var wire 1 $ clk $end
$var wire 8 P data [7:0] $end
$var wire 1 Q inc $end
$var wire 1 R latch $end
$var wire 1 ' reset $end
$var reg 8 S reg_out [7:0] $end
$upscope $end
$scope module reg_R7 $end
$var wire 1 $ clk $end
$var wire 8 T data [7:0] $end
$var wire 1 U inc $end
$var wire 1 V latch $end
$var wire 1 ' reset $end
$var reg 8 W reg_out [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
b1010 #
$end
#0
$dumpvars
bx W
0V
0U
b0 T
bx S
0R
0Q
b0 P
bx O
0N
0M
b0 L
bx K
0J
0I
b0 H
bx G
0F
0E
b0 D
bx C
0B
0A
b0 @
bx ?
0>
0=
b0 <
bx ;
1:
09
b0 8
bx 7
bx 6
bx 5
bx 4
bx 3
bx 2
bx 1
bx 0
bx /
bx .
b0 -
b0 ,
b0 +
b0 *
b0 )
b0 (
1'
b0 &
b0 %
0$
bx "
bx !
$end
#5000
b0 !
b0 7
b0 "
b0 6
b0 5
b0 ;
b0 4
b0 ?
b0 3
b0 C
b0 2
b0 G
b0 1
b0 K
b0 0
b0 O
b0 /
b0 S
b0 .
b0 W
1$
#10000
0$
#15000
1$
#20000
0$
b11111111 %
b11111111 *
b11111111 8
b11111111 <
b11111111 @
b11111111 D
b11111111 H
b11111111 L
b11111111 P
b11111111 T
0'
#25000
b11111111 !
b11111111 7
b11111111 "
b11111111 6
b11111111 5
b11111111 ;
1$
#30000
0$
#35000
1$
#40000
b0 !
b0 7
b0 "
b0 6
0$
b110 )
b110 -
b11 (
b11 ,
#45000
1$
#50000
0$
#55000
1$
#60000
0$
#65000
1$
#70000
0$
#75000
1$
#80000
0$
